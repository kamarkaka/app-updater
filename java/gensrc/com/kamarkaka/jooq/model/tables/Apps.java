/*
 * This file is generated by jOOQ.
 */
package com.kamarkaka.jooq.model.tables;


import com.kamarkaka.jooq.model.Keys;
import com.kamarkaka.jooq.model.Public;
import com.kamarkaka.jooq.model.tables.records.AppsRecord;

import java.time.OffsetDateTime;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Apps extends TableImpl<AppsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.apps</code>
     */
    public static final Apps APPS = new Apps();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AppsRecord> getRecordType() {
        return AppsRecord.class;
    }

    /**
     * The column <code>public.apps.app_id</code>.
     */
    public final TableField<AppsRecord, UUID> APP_ID = createField(DSL.name("app_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.apps.app_name</code>.
     */
    public final TableField<AppsRecord, String> APP_NAME = createField(DSL.name("app_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.apps.url_base</code>.
     */
    public final TableField<AppsRecord, String> URL_BASE = createField(DSL.name("url_base"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.apps.url_begin</code>.
     */
    public final TableField<AppsRecord, String> URL_BEGIN = createField(DSL.name("url_begin"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.apps.filename</code>.
     */
    public final TableField<AppsRecord, String> FILENAME = createField(DSL.name("filename"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.apps.hash_md5</code>.
     */
    public final TableField<AppsRecord, String> HASH_MD5 = createField(DSL.name("hash_md5"), SQLDataType.CHAR(32), this, "");

    /**
     * The column <code>public.apps.last_update</code>.
     */
    public final TableField<AppsRecord, OffsetDateTime> LAST_UPDATE = createField(DSL.name("last_update"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.apps.force_download</code>.
     */
    public final TableField<AppsRecord, Boolean> FORCE_DOWNLOAD = createField(DSL.name("force_download"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    private Apps(Name alias, Table<AppsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Apps(Name alias, Table<AppsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.apps</code> table reference
     */
    public Apps(String alias) {
        this(DSL.name(alias), APPS);
    }

    /**
     * Create an aliased <code>public.apps</code> table reference
     */
    public Apps(Name alias) {
        this(alias, APPS);
    }

    /**
     * Create a <code>public.apps</code> table reference
     */
    public Apps() {
        this(DSL.name("apps"), null);
    }

    public <O extends Record> Apps(Table<O> child, ForeignKey<O, AppsRecord> key) {
        super(child, key, APPS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<AppsRecord> getPrimaryKey() {
        return Keys.APPS_PKEY;
    }

    @Override
    public Apps as(String alias) {
        return new Apps(DSL.name(alias), this);
    }

    @Override
    public Apps as(Name alias) {
        return new Apps(alias, this);
    }

    @Override
    public Apps as(Table<?> alias) {
        return new Apps(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Apps rename(String name) {
        return new Apps(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Apps rename(Name name) {
        return new Apps(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Apps rename(Table<?> name) {
        return new Apps(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<UUID, String, String, String, String, String, OffsetDateTime, Boolean> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super UUID, ? super String, ? super String, ? super String, ? super String, ? super String, ? super OffsetDateTime, ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super UUID, ? super String, ? super String, ? super String, ? super String, ? super String, ? super OffsetDateTime, ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
