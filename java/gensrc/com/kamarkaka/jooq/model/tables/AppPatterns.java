/*
 * This file is generated by jOOQ.
 */
package com.kamarkaka.jooq.model.tables;


import com.kamarkaka.jooq.model.Keys;
import com.kamarkaka.jooq.model.Public;
import com.kamarkaka.jooq.model.tables.records.AppPatternsRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AppPatterns extends TableImpl<AppPatternsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.app_patterns</code>
     */
    public static final AppPatterns APP_PATTERNS = new AppPatterns();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AppPatternsRecord> getRecordType() {
        return AppPatternsRecord.class;
    }

    /**
     * The column <code>public.app_patterns.pattern_id</code>.
     */
    public final TableField<AppPatternsRecord, Integer> PATTERN_ID = createField(DSL.name("pattern_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.app_patterns.app_id</code>.
     */
    public final TableField<AppPatternsRecord, UUID> APP_ID = createField(DSL.name("app_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.app_patterns.pattern</code>.
     */
    public final TableField<AppPatternsRecord, String> PATTERN = createField(DSL.name("pattern"), SQLDataType.CLOB.nullable(false), this, "");

    private AppPatterns(Name alias, Table<AppPatternsRecord> aliased) {
        this(alias, aliased, null);
    }

    private AppPatterns(Name alias, Table<AppPatternsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.app_patterns</code> table reference
     */
    public AppPatterns(String alias) {
        this(DSL.name(alias), APP_PATTERNS);
    }

    /**
     * Create an aliased <code>public.app_patterns</code> table reference
     */
    public AppPatterns(Name alias) {
        this(alias, APP_PATTERNS);
    }

    /**
     * Create a <code>public.app_patterns</code> table reference
     */
    public AppPatterns() {
        this(DSL.name("app_patterns"), null);
    }

    public <O extends Record> AppPatterns(Table<O> child, ForeignKey<O, AppPatternsRecord> key) {
        super(child, key, APP_PATTERNS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<AppPatternsRecord, Integer> getIdentity() {
        return (Identity<AppPatternsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<AppPatternsRecord> getPrimaryKey() {
        return Keys.APP_PATTERNS_PKEY;
    }

    @Override
    public List<ForeignKey<AppPatternsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.APP_PATTERNS__FK1_APP_ID);
    }

    private transient Apps _apps;

    /**
     * Get the implicit join path to the <code>public.apps</code> table.
     */
    public Apps apps() {
        if (_apps == null)
            _apps = new Apps(this, Keys.APP_PATTERNS__FK1_APP_ID);

        return _apps;
    }

    @Override
    public AppPatterns as(String alias) {
        return new AppPatterns(DSL.name(alias), this);
    }

    @Override
    public AppPatterns as(Name alias) {
        return new AppPatterns(alias, this);
    }

    @Override
    public AppPatterns as(Table<?> alias) {
        return new AppPatterns(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AppPatterns rename(String name) {
        return new AppPatterns(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AppPatterns rename(Name name) {
        return new AppPatterns(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AppPatterns rename(Table<?> name) {
        return new AppPatterns(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, UUID, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Integer, ? super UUID, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Integer, ? super UUID, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
